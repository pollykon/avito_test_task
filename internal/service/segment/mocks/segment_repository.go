// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SegmentRepository is an autogenerated mock type for the SegmentRepository type
type SegmentRepository struct {
	mock.Mock
}

type SegmentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentRepository) EXPECT() *SegmentRepository_Expecter {
	return &SegmentRepository_Expecter{mock: &_m.Mock}
}

// AddSegment provides a mock function with given fields: ctx, slug, percent
func (_m *SegmentRepository) AddSegment(ctx context.Context, slug string, percent *int64) error {
	ret := _m.Called(ctx, slug, percent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int64) error); ok {
		r0 = rf(ctx, slug, percent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentRepository_AddSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSegment'
type SegmentRepository_AddSegment_Call struct {
	*mock.Call
}

// AddSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
//   - percent *int64
func (_e *SegmentRepository_Expecter) AddSegment(ctx interface{}, slug interface{}, percent interface{}) *SegmentRepository_AddSegment_Call {
	return &SegmentRepository_AddSegment_Call{Call: _e.mock.On("AddSegment", ctx, slug, percent)}
}

func (_c *SegmentRepository_AddSegment_Call) Run(run func(ctx context.Context, slug string, percent *int64)) *SegmentRepository_AddSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*int64))
	})
	return _c
}

func (_c *SegmentRepository_AddSegment_Call) Return(_a0 error) *SegmentRepository_AddSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentRepository_AddSegment_Call) RunAndReturn(run func(context.Context, string, *int64) error) *SegmentRepository_AddSegment_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToSegment provides a mock function with given fields: ctx, userID, slugs, ttl
func (_m *SegmentRepository) AddUserToSegment(ctx context.Context, userID int64, slugs []string, ttl *time.Duration) error {
	ret := _m.Called(ctx, userID, slugs, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string, *time.Duration) error); ok {
		r0 = rf(ctx, userID, slugs, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentRepository_AddUserToSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToSegment'
type SegmentRepository_AddUserToSegment_Call struct {
	*mock.Call
}

// AddUserToSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - slugs []string
//   - ttl *time.Duration
func (_e *SegmentRepository_Expecter) AddUserToSegment(ctx interface{}, userID interface{}, slugs interface{}, ttl interface{}) *SegmentRepository_AddUserToSegment_Call {
	return &SegmentRepository_AddUserToSegment_Call{Call: _e.mock.On("AddUserToSegment", ctx, userID, slugs, ttl)}
}

func (_c *SegmentRepository_AddUserToSegment_Call) Run(run func(ctx context.Context, userID int64, slugs []string, ttl *time.Duration)) *SegmentRepository_AddUserToSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]string), args[3].(*time.Duration))
	})
	return _c
}

func (_c *SegmentRepository_AddUserToSegment_Call) Return(_a0 error) *SegmentRepository_AddUserToSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentRepository_AddUserToSegment_Call) RunAndReturn(run func(context.Context, int64, []string, *time.Duration) error) *SegmentRepository_AddUserToSegment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSegment provides a mock function with given fields: ctx, slug
func (_m *SegmentRepository) DeleteSegment(ctx context.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentRepository_DeleteSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSegment'
type SegmentRepository_DeleteSegment_Call struct {
	*mock.Call
}

// DeleteSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *SegmentRepository_Expecter) DeleteSegment(ctx interface{}, slug interface{}) *SegmentRepository_DeleteSegment_Call {
	return &SegmentRepository_DeleteSegment_Call{Call: _e.mock.On("DeleteSegment", ctx, slug)}
}

func (_c *SegmentRepository_DeleteSegment_Call) Run(run func(ctx context.Context, slug string)) *SegmentRepository_DeleteSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SegmentRepository_DeleteSegment_Call) Return(_a0 error) *SegmentRepository_DeleteSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentRepository_DeleteSegment_Call) RunAndReturn(run func(context.Context, string) error) *SegmentRepository_DeleteSegment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserFromSegment provides a mock function with given fields: ctx, userID, slugs
func (_m *SegmentRepository) DeleteUserFromSegment(ctx context.Context, userID int64, slugs []string) error {
	ret := _m.Called(ctx, userID, slugs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string) error); ok {
		r0 = rf(ctx, userID, slugs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentRepository_DeleteUserFromSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserFromSegment'
type SegmentRepository_DeleteUserFromSegment_Call struct {
	*mock.Call
}

// DeleteUserFromSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - slugs []string
func (_e *SegmentRepository_Expecter) DeleteUserFromSegment(ctx interface{}, userID interface{}, slugs interface{}) *SegmentRepository_DeleteUserFromSegment_Call {
	return &SegmentRepository_DeleteUserFromSegment_Call{Call: _e.mock.On("DeleteUserFromSegment", ctx, userID, slugs)}
}

func (_c *SegmentRepository_DeleteUserFromSegment_Call) Run(run func(ctx context.Context, userID int64, slugs []string)) *SegmentRepository_DeleteUserFromSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]string))
	})
	return _c
}

func (_c *SegmentRepository_DeleteUserFromSegment_Call) Return(_a0 error) *SegmentRepository_DeleteUserFromSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentRepository_DeleteUserFromSegment_Call) RunAndReturn(run func(context.Context, int64, []string) error) *SegmentRepository_DeleteUserFromSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserActiveSegments provides a mock function with given fields: ctx, userID
func (_m *SegmentRepository) GetUserActiveSegments(ctx context.Context, userID int64) ([]string, error) {
	ret := _m.Called(ctx, userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentRepository_GetUserActiveSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserActiveSegments'
type SegmentRepository_GetUserActiveSegments_Call struct {
	*mock.Call
}

// GetUserActiveSegments is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *SegmentRepository_Expecter) GetUserActiveSegments(ctx interface{}, userID interface{}) *SegmentRepository_GetUserActiveSegments_Call {
	return &SegmentRepository_GetUserActiveSegments_Call{Call: _e.mock.On("GetUserActiveSegments", ctx, userID)}
}

func (_c *SegmentRepository_GetUserActiveSegments_Call) Run(run func(ctx context.Context, userID int64)) *SegmentRepository_GetUserActiveSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *SegmentRepository_GetUserActiveSegments_Call) Return(_a0 []string, _a1 error) *SegmentRepository_GetUserActiveSegments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentRepository_GetUserActiveSegments_Call) RunAndReturn(run func(context.Context, int64) ([]string, error)) *SegmentRepository_GetUserActiveSegments_Call {
	_c.Call.Return(run)
	return _c
}

// InTransaction provides a mock function with given fields: ctx, f
func (_m *SegmentRepository) InTransaction(ctx context.Context, f func(context.Context) error) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentRepository_InTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InTransaction'
type SegmentRepository_InTransaction_Call struct {
	*mock.Call
}

// InTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - f func(context.Context) error
func (_e *SegmentRepository_Expecter) InTransaction(ctx interface{}, f interface{}) *SegmentRepository_InTransaction_Call {
	return &SegmentRepository_InTransaction_Call{Call: _e.mock.On("InTransaction", ctx, f)}
}

func (_c *SegmentRepository_InTransaction_Call) Run(run func(ctx context.Context, f func(context.Context) error)) *SegmentRepository_InTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *SegmentRepository_InTransaction_Call) Return(_a0 error) *SegmentRepository_InTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentRepository_InTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *SegmentRepository_InTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentRepository creates a new instance of SegmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentRepository {
	mock := &SegmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
