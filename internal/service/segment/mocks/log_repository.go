// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LogRepository is an autogenerated mock type for the LogRepository type
type LogRepository struct {
	mock.Mock
}

type LogRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LogRepository) EXPECT() *LogRepository_Expecter {
	return &LogRepository_Expecter{mock: &_m.Mock}
}

// AddLog provides a mock function with given fields: ctx, userID, _a2, operation
func (_m *LogRepository) Add(ctx context.Context, userID int64, _a2 []string, operation string) error {
	ret := _m.Called(ctx, userID, _a2, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string, string) error); ok {
		r0 = rf(ctx, userID, _a2, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogRepository_AddLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type LogRepository_AddLog_Call struct {
	*mock.Call
}

// AddLog is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - _a2 []string
//   - operation string
func (_e *LogRepository_Expecter) AddLog(ctx interface{}, userID interface{}, _a2 interface{}, operation interface{}) *LogRepository_AddLog_Call {
	return &LogRepository_AddLog_Call{Call: _e.mock.On("Add", ctx, userID, _a2, operation)}
}

func (_c *LogRepository_AddLog_Call) Run(run func(ctx context.Context, userID int64, _a2 []string, operation string)) *LogRepository_AddLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]string), args[3].(string))
	})
	return _c
}

func (_c *LogRepository_AddLog_Call) Return(_a0 error) *LogRepository_AddLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogRepository_AddLog_Call) RunAndReturn(run func(context.Context, int64, []string, string) error) *LogRepository_AddLog_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogRepository creates a new instance of LogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogRepository {
	mock := &LogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
