// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SegmentService is an autogenerated mock type for the SegmentService type
type SegmentService struct {
	mock.Mock
}

type SegmentService_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentService) EXPECT() *SegmentService_Expecter {
	return &SegmentService_Expecter{mock: &_m.Mock}
}

// GetUserActiveSegments provides a mock function with given fields: ctx, userID
func (_m *SegmentService) GetUserActiveSegments(ctx context.Context, userID int64) ([]string, error) {
	ret := _m.Called(ctx, userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentService_GetUserActiveSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserActiveSegments'
type SegmentService_GetUserActiveSegments_Call struct {
	*mock.Call
}

// GetUserActiveSegments is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *SegmentService_Expecter) GetUserActiveSegments(ctx interface{}, userID interface{}) *SegmentService_GetUserActiveSegments_Call {
	return &SegmentService_GetUserActiveSegments_Call{Call: _e.mock.On("GetUserActiveSegments", ctx, userID)}
}

func (_c *SegmentService_GetUserActiveSegments_Call) Run(run func(ctx context.Context, userID int64)) *SegmentService_GetUserActiveSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *SegmentService_GetUserActiveSegments_Call) Return(_a0 []string, _a1 error) *SegmentService_GetUserActiveSegments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentService_GetUserActiveSegments_Call) RunAndReturn(run func(context.Context, int64) ([]string, error)) *SegmentService_GetUserActiveSegments_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentService creates a new instance of SegmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentService {
	mock := &SegmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
