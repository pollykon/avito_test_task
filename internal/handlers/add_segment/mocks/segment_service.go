// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SegmentService is an autogenerated mock type for the SegmentService type
type SegmentService struct {
	mock.Mock
}

type SegmentService_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentService) EXPECT() *SegmentService_Expecter {
	return &SegmentService_Expecter{mock: &_m.Mock}
}

// AddSegment provides a mock function with given fields: ctx, slug
func (_m *SegmentService) AddSegment(ctx context.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentService_AddSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSegment'
type SegmentService_AddSegment_Call struct {
	*mock.Call
}

// AddSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *SegmentService_Expecter) AddSegment(ctx interface{}, slug interface{}) *SegmentService_AddSegment_Call {
	return &SegmentService_AddSegment_Call{Call: _e.mock.On("AddSegment", ctx, slug)}
}

func (_c *SegmentService_AddSegment_Call) Run(run func(ctx context.Context, slug string)) *SegmentService_AddSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SegmentService_AddSegment_Call) Return(_a0 error) *SegmentService_AddSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentService_AddSegment_Call) RunAndReturn(run func(context.Context, string) error) *SegmentService_AddSegment_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentService creates a new instance of SegmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentService {
	mock := &SegmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
